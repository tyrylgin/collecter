// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package metricmock is a generated GoMock package.
package metricmock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/tyrylgin/collecter/model"
)

// MockProcessor is a mock of Processor interface.
type MockProcessor struct {
	ctrl     *gomock.Controller
	recorder *MockProcessorMockRecorder
}

// MockProcessorMockRecorder is the mock recorder for MockProcessor.
type MockProcessorMockRecorder struct {
	mock *MockProcessor
}

// NewMockProcessor creates a new mock instance.
func NewMockProcessor(ctrl *gomock.Controller) *MockProcessor {
	mock := &MockProcessor{ctrl: ctrl}
	mock.recorder = &MockProcessorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProcessor) EXPECT() *MockProcessorMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockProcessor) Get(name string, metricType *model.MetricType) (model.Metric, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", name, metricType)
	ret0, _ := ret[0].(model.Metric)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockProcessorMockRecorder) Get(name, metricType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockProcessor)(nil).Get), name, metricType)
}

// GetAll mocks base method.
func (m *MockProcessor) GetAll() map[string]model.Metric {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].(map[string]model.Metric)
	return ret0
}

// GetAll indicates an expected call of GetAll.
func (mr *MockProcessorMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockProcessor)(nil).GetAll))
}

// IncreaseCounter mocks base method.
func (m *MockProcessor) IncreaseCounter(name string, value int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IncreaseCounter", name, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// IncreaseCounter indicates an expected call of IncreaseCounter.
func (mr *MockProcessorMockRecorder) IncreaseCounter(name, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncreaseCounter", reflect.TypeOf((*MockProcessor)(nil).IncreaseCounter), name, value)
}

// SetCounter mocks base method.
func (m *MockProcessor) SetCounter(name string, value int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetCounter", name, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetCounter indicates an expected call of SetCounter.
func (mr *MockProcessorMockRecorder) SetCounter(name, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCounter", reflect.TypeOf((*MockProcessor)(nil).SetCounter), name, value)
}

// SetGauge mocks base method.
func (m *MockProcessor) SetGauge(name string, value float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetGauge", name, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetGauge indicates an expected call of SetGauge.
func (mr *MockProcessorMockRecorder) SetGauge(name, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetGauge", reflect.TypeOf((*MockProcessor)(nil).SetGauge), name, value)
}
