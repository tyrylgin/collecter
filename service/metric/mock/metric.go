// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package metricmock is a generated GoMock package.
package metricmock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/tyrylgin/collecter/model"
)

// MockProcessor is a mock of Processor interface.
type MockProcessor struct {
	ctrl     *gomock.Controller
	recorder *MockProcessorMockRecorder
}

// MockProcessorMockRecorder is the mock recorder for MockProcessor.
type MockProcessorMockRecorder struct {
	mock *MockProcessor
}

// NewMockProcessor creates a new mock instance.
func NewMockProcessor(ctrl *gomock.Controller) *MockProcessor {
	mock := &MockProcessor{ctrl: ctrl}
	mock.recorder = &MockProcessorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProcessor) EXPECT() *MockProcessorMockRecorder {
	return m.recorder
}

// GetAll mocks base method.
func (m *MockProcessor) GetAll(ctx context.Context) map[string]model.Metric {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx)
	ret0, _ := ret[0].(map[string]model.Metric)
	return ret0
}

// GetAll indicates an expected call of GetAll.
func (mr *MockProcessorMockRecorder) GetAll(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockProcessor)(nil).GetAll), ctx)
}

// IncreaseCounter mocks base method.
func (m *MockProcessor) IncreaseCounter(ctx context.Context, name string, value int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IncreaseCounter", ctx, name, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// IncreaseCounter indicates an expected call of IncreaseCounter.
func (mr *MockProcessorMockRecorder) IncreaseCounter(ctx, name, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncreaseCounter", reflect.TypeOf((*MockProcessor)(nil).IncreaseCounter), ctx, name, value)
}

// SetGauge mocks base method.
func (m *MockProcessor) SetGauge(ctx context.Context, name string, value float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetGauge", ctx, name, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetGauge indicates an expected call of SetGauge.
func (mr *MockProcessorMockRecorder) SetGauge(ctx, name, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetGauge", reflect.TypeOf((*MockProcessor)(nil).SetGauge), ctx, name, value)
}
